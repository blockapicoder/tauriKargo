name: Build + Sign + Release (Windows)

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  build_sign_release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri -> target

      - name: Setup sccache
        uses: mozilla-actions/sccache-action@v0.0.7

      - name: Enable sccache
        shell: pwsh
        run: |
          "RUSTC_WRAPPER=sccache" | Out-File -Append $env:GITHUB_ENV
          "SCCACHE_CACHE_SIZE=2G"  | Out-File -Append $env:GITHUB_ENV

      - name: Install Tauri CLI
        run: cargo install tauri-cli --locked --version ^1.6

      - name: Stage web assets to ./dist
        shell: pwsh
        run: |
          if (Test-Path dist) { Remove-Item -Recurse -Force dist }
          New-Item -ItemType Directory -Force dist | Out-Null
          Copy-Item src-tauri\assets\* dist -Recurse -Force
          if (-not (Test-Path dist\index.html)) { Write-Error "index.html missing in staged dist" }

      - name: Generate icons (idempotent)
        run: cargo tauri icon src-tauri/icon.png

      - name: Prepare code signing (optional)
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          if ($env:WINDOWS_CERTIFICATE -and $env:WINDOWS_CERTIFICATE_PASSWORD) {
            New-Item -ItemType Directory -Force certificate | Out-Null
            Set-Content certificate\cert.b64 $env:WINDOWS_CERTIFICATE
            certutil -decode certificate\cert.b64 certificate\codesign.pfx | Out-Null
            "TAURI_WIN_CERT_PATH=$(Resolve-Path certificate\codesign.pfx)" | Out-File -FilePath $env:GITHUB_ENV -Append
            "TAURI_WIN_CERT_PASS=$($env:WINDOWS_CERTIFICATE_PASSWORD)" | Out-File -FilePath $env:GITHUB_ENV -Append
          } else {
            Write-Host "No signing secrets: build will still succeed, signing step will be skipped."
          }

      - name: Build portable EXE (tauri)
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_WIN_CERT_PATH: ${{ env.TAURI_WIN_CERT_PATH }}
          TAURI_WIN_CERT_PASS: ${{ env.TAURI_WIN_CERT_PASS }}
          TAURI_BUNDLE_TARGETS: app
        with:
          bundles: app
          args: --config src-tauri/tauri.ci.json

      - name: Locate built EXE
        id: find
        shell: pwsh
        run: |
          $exe = Get-ChildItem src-tauri/target/release -Filter *.exe -Recurse | Sort-Object Length -Descending | Select-Object -First 1
          if (-not $exe) { Write-Error "No EXE found after build." }
          "exe=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "EXE => $($exe.FullName)"

      - name: Resolve signtool.exe (for manual signing)
        if: ${{ secrets.WINDOWS_CERTIFICATE && secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        shell: pwsh
        run: |
          $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
            Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          if (-not $st) {
            choco install windows-sdk-10-version-10.0.22621.0 -y --no-progress
            $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
              Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          }
          if (-not $st) { Write-Error "signtool.exe not found." }
          "SIGNTOOL=$st" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Sign EXE (timestamp; skip if no secrets)
        if: ${{ secrets.WINDOWS_CERTIFICATE && secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          $exe = "${{ steps.find.outputs.exe }}"
          $ok = $false
          $rfc = @(
            "http://timestamp.digicert.com",
            "http://timestamp.sectigo.com/rfc3161",
            "http://rfc3161timestamp.globalsign.com/advanced"
          )
          foreach ($u in $rfc) {
            & "$env:SIGNTOOL" sign /fd sha256 /f certificate\codesign.pfx /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /tr $u /td sha256 /d "TauriKargo" "$exe"
            if ($LASTEXITCODE -eq 0) { $ok = $true; break } else { Write-Warning "RFC3161 failed: $u" }
          }
          if (-not $ok) {
            $legacy=@("http://timestamp.digicert.com","http://timestamp.sectigo.com","http://timestamp.globalsign.com/scripts/timestamp.dll")
            foreach ($u in $legacy) {
              & "$env:SIGNTOOL" sign /fd sha256 /f certificate\codesign.pfx /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /t $u /d "TauriKargo" "$exe"
              if ($LASTEXITCODE -eq 0) { $ok = $true; break } else { Write-Warning "legacy /t failed: $u" }
            }
          }
          if (-not $ok) { Write-Error "All timestamp servers failed." }

      - name: Package release/ (EXE + ZIP) — single run (no latest caching)
        id: pack
        shell: pwsh
        run: |
          $ErrorActionPreference='Stop'
          Add-Type -AssemblyName System.IO.Compression.FileSystem

          $tag  = "run-${{ github.run_id }}"
          $base = "TauriKargo-${{ github.run_id }}"
          $title= "Windows build (run ${{ github.run_id }})"

          $ws = "${{ github.workspace }}"
          $out = Join-Path $ws "release"
          if (Test-Path $out) { Remove-Item $out -Recurse -Force }
          New-Item -ItemType Directory -Force $out | Out-Null

          # EXE public (copie définitive)
          $exeTarget = Join-Path $out ($base + "-windows-x64.exe")
          Copy-Item -LiteralPath "${{ steps.find.outputs.exe }}" -Destination $exeTarget -Force

          # ZIP "safe": EXE dans bin/
          $root = Join-Path $out $base
          New-Item -ItemType Directory -Force $root | Out-Null
          $bin = Join-Path $root "bin"
          New-Item -ItemType Directory -Force $bin | Out-Null
          Copy-Item -LiteralPath $exeTarget -Destination (Join-Path $bin (Split-Path $exeTarget -Leaf)) -Force
          "See bin\$(Split-Path $exeTarget -Leaf)" | Set-Content (Join-Path $root "README.txt")

          $zip = Join-Path $out ($base + "-windows-x64.zip")
          if (Test-Path $zip) { Remove-Item $zip -Force }
          [IO.Compression.ZipFile]::CreateFromDirectory($root, $zip, [IO.Compression.CompressionLevel]::Optimal, $true)

          "exe_rel=release/$(Split-Path $exeTarget -Leaf)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "zip_rel=release/$(Split-Path $zip -Leaf)"       | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "tag=$tag"                                       | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "title=$title"                                   | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "base=$base"                                     | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload artifacts (EXE + ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.pack.outputs.base }}-artifacts
          path: |
            ${{ steps.pack.outputs.exe_rel }}
            ${{ steps.pack.outputs.zip_rel }}
          if-no-files-found: error
          compression-level: 0

      - name: Create/Update Release (attach files)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.pack.outputs.tag }}
          name: ${{ steps.pack.outputs.title }}
          prerelease: false
          make_latest: true
          draft: false
          fail_on_unmatched_files: true
          files: |
            ${{ steps.pack.outputs.zip_rel }}
            ${{ steps.pack.outputs.exe_rel }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary (links)
        shell: pwsh
        run: |
          $tag  = "${{ steps.pack.outputs.tag }}"
          $repo = "${{ github.repository }}"
          $base = "${{ steps.pack.outputs.base }}"
          @(
            "# Release"
            "Tag : $tag"
            "EXE : https://github.com/$repo/releases/download/$tag/$base-windows-x64.exe"
            "ZIP : https://github.com/$repo/releases/download/$tag/$base-windows-x64.zip"
          ) | Set-Content -Path $env:GITHUB_STEP_SUMMARY -Encoding utf8
