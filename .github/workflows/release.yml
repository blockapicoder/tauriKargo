name: Sign Windows EXE (by run_id)

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: "Run ID of the build that published the artifact"
        required: true
      artifact_name:
        description: "Artifact name to sign"
        required: true
        default: "tauri-windows-exe"

permissions:
  actions: read
  contents: write

jobs:
  sign:
    runs-on: windows-latest
    steps:
      - name: Download artifact from run
        uses: dawidd6/action-download-artifact@v3
        with:
          run_id: ${{ inputs.run_id }}
          name: ${{ inputs.artifact_name }}
          if_no_artifact_found: fail

      - name: Check signing secrets
        shell: pwsh
        run: |
          if (-not "${{ secrets.WINDOWS_CERTIFICATE }}" -or -not "${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}") {
            Write-Error "Missing WINDOWS_CERTIFICATE / WINDOWS_CERTIFICATE_PASSWORD"
          }

      - name: Decode PFX
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        run: |
          New-Item -ItemType Directory -Force certificate | Out-Null
          Set-Content certificate\cert.b64 $env:WINDOWS_CERTIFICATE
          certutil -decode certificate\cert.b64 certificate\codesign.pfx | Out-Null

      - name: Resolve signtool.exe
        shell: pwsh
        run: |
          $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
            Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          if (-not $st) {
            choco install windows-sdk-10-version-10.0.22621.0 -y
            $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
              Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          }
          if (-not $st) { Write-Error "signtool.exe not found." }
          "SIGNTOOL=$st" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Locate EXE to sign
        id: findexe
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Path . -Filter TauriKargo*.exe -Recurse | Select-Object -First 1
          if (-not $exe) { Write-Error "No 'TauriKargo*.exe' found in downloaded artifact." }
          "exe=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "EXE => $($exe.FullName)"

      - name: Sign EXE (signtool)
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          $exe = "${{ steps.findexe.outputs.exe }}"
          & "$env:SIGNTOOL" sign `
            /fd sha256 `
            /f certificate\codesign.pfx `
            /p "$env:WINDOWS_CERTIFICATE_PASSWORD" `
            /tr http://timestamp.digicert.com `
            /td sha256 `
            /d "TauriKargo" `
            "$exe"
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

      - name: Verify signature
        shell: pwsh
        run: |
          $exe = "${{ steps.findexe.outputs.exe }}"
          $sig = Get-AuthenticodeSignature "$exe"
          $sig | Format-List Status,StatusMessage,SignerCertificate
          if ($sig.Status -ne 'Valid') { Write-Error "Signature invalid: $($sig.Status)" }

      - name: Upload signed exe
        uses: actions/upload-artifact@v4
        with:
          name: signed-exe
          path: ${{ steps.findexe.outputs.exe }}

      - name: Attach to (or create) pre-release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: "Latest signed build"
          prerelease: true
          make_latest: true
          draft: false
          files: ${{ steps.findexe.outputs.exe }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
