name: Sign Windows EXE (by run_id)

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: "Run ID du build ayant publié l'artifact"
        required: true
      artifact_name:
        description: "Nom exact de l'artifact à télécharger (contient l'EXE)"
        required: true
        default: "tauri-windows-exe"
      tag_name:
        description: "Tag de Release (ex: v1.2.3)"
        required: false
        default: latest
      release_name:
        description: "Nom/Titre de la Release"
        required: false
        default: "Latest signed build"

permissions:
  actions: read
  contents: write

jobs:
  sign:
    runs-on: windows-latest
    steps:
      - name: Download EXE artifact from run
        uses: dawidd6/action-download-artifact@v3
        with:
          run_id: ${{ inputs.run_id }}
          name: ${{ inputs.artifact_name }}
          if_no_artifact_found: fail

      - name: Require signing secrets
        shell: pwsh
        run: |
          if (-not "${{ secrets.WINDOWS_CERTIFICATE }}" -or -not "${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}") {
            Write-Error "Missing secrets: WINDOWS_CERTIFICATE / WINDOWS_CERTIFICATE_PASSWORD"
          }

      - name: Decode PFX
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        run: |
          New-Item -ItemType Directory -Force certificate | Out-Null
          Set-Content certificate\cert.b64 $env:WINDOWS_CERTIFICATE
          certutil -decode certificate\cert.b64 certificate\codesign.pfx | Out-Null

      - name: Resolve signtool.exe
        shell: pwsh
        run: |
          $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
            Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          if (-not $st) {
            choco install windows-sdk-10-version-10.0.22621.0 -y
            $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
              Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          }
          if (-not $st) { Write-Error "signtool.exe not found." }
          "SIGNTOOL=$st" | Out-File -FilePath $env:GITHUB_ENV -Append
          & "$st" sign /? | Select-Object -First 5 | Out-String | Write-Host

      - name: Locate EXE (only)
        id: find
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Path . -Filter *.exe -Recurse | Sort-Object Length -Descending | Select-Object -First 1
          if (-not $exe) { Write-Error "No .exe found in downloaded artifact." }
          $zip = Join-Path $exe.DirectoryName "$($exe.BaseName)-windows-x64.zip"
          "exe=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "zip=$zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "EXE => $($exe.FullName)"
          Write-Host "ZIP (to create) => $zip"

      - name: Sign EXE (try multiple timestamp servers)
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          $exe = "${{ steps.find.outputs.exe }}"
          $serversRFC3161 = @(
            "http://timestamp.digicert.com",
            "http://timestamp.sectigo.com/rfc3161",
            "http://rfc3161timestamp.globalsign.com/advanced"
          )
          $serversLegacy = @(
            "http://timestamp.digicert.com",
            "http://timestamp.sectigo.com",
            "http://timestamp.globalsign.com/scripts/timestamp.dll"
          )
          $signed = $false
          foreach ($url in $serversRFC3161) {
            Write-Host "-> Trying RFC3161: $url"
            & "$env:SIGNTOOL" sign `
              /fd sha256 `
              /f certificate\codesign.pfx `
              /p "$env:WINDOWS_CERTIFICATE_PASSWORD" `
              /tr $url `
              /td sha256 `
              /d "TauriKargo" `
              "$exe"
            if ($LASTEXITCODE -eq 0) { $signed = $true; break }
            Write-Warning "RFC3161 failed with $url (exit $LASTEXITCODE)"
          }
          if (-not $signed) {
            foreach ($url in $serversLegacy) {
              Write-Host "-> Trying legacy /t: $url"
              & "$env:SIGNTOOL" sign `
                /fd sha256 `
                /f certificate\codesign.pfx `
                /p "$env:WINDOWS_CERTIFICATE_PASSWORD" `
                /t $url `
                /d "TauriKargo" `
                "$exe"
              if ($LASTEXITCODE -eq 0) { $signed = $true; break }
              Write-Warning "Legacy /t failed with $url (exit $LASTEXITCODE)"
            }
          }
          if (-not $signed) { Write-Error "All timestamp servers failed." }

      - name: Verify signature (signtool + PS, tolerant)
        shell: pwsh
        run: |
          $exe = "${{ steps.find.outputs.exe }}"
          & "$env:SIGNTOOL" verify /pa /tw /v "$exe"
          if ($LASTEXITCODE -ne 0) {
            Write-Warning "signtool verify non-zero (fréquent avec cert auto-signé)."
          }
          $sig = Get-AuthenticodeSignature "$exe"
          $status = $sig.Status.ToString()
          Write-Host "PS Authenticode status: $status"
          if ($status -in @('NotSigned','HashMismatch','InvalidCertificate')) {
            Write-Error "Signature invalide: $status"
          }

      - name: Build ZIP from signed EXE
        id: zip
        shell: pwsh
        run: |
          $exe = "${{ steps.find.outputs.exe }}"
          $zip = "${{ steps.find.outputs.zip }}"
          if (Test-Path $zip) { Remove-Item $zip -Force }
          Compress-Archive -Path $exe -DestinationPath $zip
          $sha256_zip = (Get-FileHash $zip -Algorithm SHA256).Hash
          $sha256_exe = (Get-FileHash $exe -Algorithm SHA256).Hash
          "zip_sha256=$sha256_zip" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "exe_sha256=$sha256_exe" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "ZIP: $zip"
          Write-Host "ZIP SHA256: $sha256_zip"
          Write-Host "EXE SHA256: $sha256_exe"

      - name: Upload signed exe (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: signed-exe
          path: ${{ steps.find.outputs.exe }}
          if-no-files-found: error
          compression-level: 0

      - name: Upload signed zip (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: signed-zip
          path: ${{ steps.find.outputs.zip }}
          if-no-files-found: error
          compression-level: 0

      - name: Stage release files (normalize paths)
        id: stage
        shell: pwsh
        run: |
          $ws = "${{ github.workspace }}"
          $out = Join-Path $ws "release"
          if (Test-Path $out) { Remove-Item $out -Recurse -Force }
          New-Item -ItemType Directory -Force $out | Out-Null

          $exe = "${{ steps.find.outputs.exe }}"
          $zip = "${{ steps.find.outputs.zip }}"

          Copy-Item $exe (Join-Path $out (Split-Path $exe -Leaf)) -Force
          Copy-Item $zip (Join-Path $out (Split-Path $zip -Leaf)) -Force

          $exeRel = ("release/" + (Split-Path $exe -Leaf))
          $zipRel = ("release/" + (Split-Path $zip -Leaf))

          "exe_rel=$exeRel" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "zip_rel=$zipRel" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create / Update Pre-release (ZIP + EXE)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag_name }}
          name: ${{ inputs.release_name }}
          prerelease: true
          make_latest: true
          draft: false
          fail_on_unmatched_files: true
          files: |
            ${{ steps.stage.outputs.zip_rel }}
            ${{ steps.stage.outputs.exe_rel }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        shell: pwsh
        run: |
          @(
            "# Signing & Release summary"
            "EXE : ${{ steps.find.outputs.exe }}"
            "EXE SHA256 : ${{ steps.zip.outputs.exe_sha256 }}"
            "ZIP : ${{ steps.find.outputs.zip }}"
            "ZIP SHA256 : ${{ steps.zip.outputs.zip_sha256 }}"
            "Tag : ${{ inputs.tag_name }}"
          ) | Set-Content -Path $env:GITHUB_STEP_SUMMARY -Encoding utf8
