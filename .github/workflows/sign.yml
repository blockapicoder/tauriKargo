name: Sign & Release (from run_id)

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: "Run ID du build (Actions)"
        required: true
      artifact_name:
        description: "Nom exact de l'artifact contenant l'EXE"
        required: true
        default: "tauri-windows-exe"

permissions:
  actions: read
  contents: write

jobs:
  sign_and_release:
    runs-on: windows-latest
    steps:
      - name: Download EXE artifact from run
        uses: dawidd6/action-download-artifact@v3
        with:
          run_id: ${{ inputs.run_id }}
          name: ${{ inputs.artifact_name }}
          if_no_artifact_found: fail

      - name: Require signing secrets
        shell: pwsh
        run: |
          if (-not "${{ secrets.WINDOWS_CERTIFICATE }}" -or -not "${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}") {
            Write-Error "Missing secrets: WINDOWS_CERTIFICATE / WINDOWS_CERTIFICATE_PASSWORD"
          }

      - name: Decode PFX
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        run: |
          $ErrorActionPreference='Stop'
          New-Item -ItemType Directory -Force certificate | Out-Null
          Set-Content certificate\cert.b64 $env:WINDOWS_CERTIFICATE
          certutil -decode certificate\cert.b64 certificate\codesign.pfx | Out-Null

      - name: Resolve signtool.exe
        shell: pwsh
        run: |
          $ErrorActionPreference='Stop'
          $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
            Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          if (-not $st) {
            choco install windows-sdk-10-version-10.0.22621.0 -y
            $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
              Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          }
          if (-not $st) { Write-Error "signtool.exe not found." }
          "SIGNTOOL=$st" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Locate EXE
        id: find
        shell: pwsh
        run: |
          $ErrorActionPreference='Stop'
          $exe = Get-ChildItem -Path . -Filter *.exe -Recurse | Sort-Object Length -Descending | Select-Object -First 1
          if (-not $exe) { Write-Error "No .exe found in downloaded artifact." }
          "exe=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "EXE => $($exe.FullName)"

      - name: Sign EXE (RFC3161 then /t)
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          $ErrorActionPreference='Stop'
          $exe = "${{ steps.find.outputs.exe }}"
          $ok = $false
          $rfc = @("http://timestamp.digicert.com","http://timestamp.sectigo.com/rfc3161","http://rfc3161timestamp.globalsign.com/advanced")
          foreach ($u in $rfc) {
            & "$env:SIGNTOOL" sign /fd sha256 /f certificate\codesign.pfx /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /tr $u /td sha256 /d "TauriKargo" "$exe"
            if ($LASTEXITCODE -eq 0) { $ok = $true; break } else { Write-Warning "RFC3161 fail: $u" }
          }
          if (-not $ok) {
            $legacy=@("http://timestamp.digicert.com","http://timestamp.sectigo.com","http://timestamp.globalsign.com/scripts/timestamp.dll")
            foreach ($u in $legacy) {
              & "$env:SIGNTOOL" sign /fd sha256 /f certificate\codesign.pfx /p "$env:WINDOWS_CERTIFICATE_PASSWORD" /t $u /d "TauriKargo" "$exe"
              if ($LASTEXITCODE -eq 0) { $ok = $true; break } else { Write-Warning "legacy /t fail: $u" }
            }
          }
          if (-not $ok) { Write-Error "All timestamp servers failed." }

      - name: Pack release/ (names include run_id; AV-friendly ZIP)
        id: pack
        shell: pwsh
        run: |
          $ErrorActionPreference='Stop'
          Add-Type -AssemblyName System.IO.Compression.FileSystem
          $rid = "${{ inputs.run_id }}"

          $ws = "${{ github.workspace }}"
          $relDir = Join-Path $ws "release"
          if (Test-Path $relDir) { Remove-Item $relDir -Recurse -Force }
          New-Item -ItemType Directory -Force $relDir | Out-Null

          # Fichiers avec run_id pour Ã©viter tout cache
          $exeOut = Join-Path $relDir ("TauriKargo-" + $rid + "-windows-x64.exe")
          Copy-Item -LiteralPath "${{ steps.find.outputs.exe }}" -Destination $exeOut -Force

          $root = Join-Path $relDir ("TauriKargo-" + $rid)
          New-Item -ItemType Directory -Force $root | Out-Null
          $bin = Join-Path $root "bin"
          New-Item -ItemType Directory -Force $bin | Out-Null
          Copy-Item -LiteralPath $exeOut -Destination (Join-Path $bin (Split-Path $exeOut -Leaf)) -Force
          "See bin\$(Split-Path $exeOut -Leaf)" | Set-Content (Join-Path $root "README.txt")

          $zipOut = Join-Path $relDir ("TauriKargo-" + $rid + "-windows-x64.zip")
          if (Test-Path $zipOut) { Remove-Item $zipOut -Force }
          [IO.Compression.ZipFile]::CreateFromDirectory($root, $zipOut, [IO.Compression.CompressionLevel]::Optimal, $true)

          "exe_rel=release/$(Split-Path $exeOut -Leaf)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "zip_rel=release/$(Split-Path $zipOut -Leaf)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "tag=run-${rid}" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "title=Signed build (run ${rid})" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      # (Optionnel) artifacts lisibles dans Actions
      - name: Upload signed exe (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: TauriKargo-${{ inputs.run_id }}-windows-x64.exe
          path: ${{ steps.pack.outputs.exe_rel }}
          if-no-files-found: error
          compression-level: 0

      - name: Upload signed zip (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: TauriKargo-${{ inputs.run_id }}-windows-x64.zip
          path: ${{ steps.pack.outputs.zip_rel }}
          if-no-files-found: error
          compression-level: 0

      - name: Create / Update Release (no files)
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.pack.outputs.tag }}
          name: ${{ steps.pack.outputs.title }}
          prerelease: false
          make_latest: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload assets via gh (fixed names, clobber)
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ steps.pack.outputs.tag }}" "${{ steps.pack.outputs.zip_rel }}#TauriKargo-${{ inputs.run_id }}-windows-x64.zip" --clobber
          gh release upload "${{ steps.pack.outputs.tag }}" "${{ steps.pack.outputs.exe_rel }}#TauriKargo-${{ inputs.run_id }}-windows-x64.exe" --clobber

      - name: Summary
        shell: pwsh
        run: |
          @(
            "# Release from run_id"
            "Tag : ${{ steps.pack.outputs.tag }}"
            "EXE : TauriKargo-${{ inputs.run_id }}-windows-x64.exe"
            "ZIP : TauriKargo-${{ inputs.run_id }}-windows-x64.zip"
            "Link (ZIP) : https://github.com/${{ github.repository }}/releases/download/${{ steps.pack.outputs.tag }}/TauriKargo-${{ inputs.run_id }}-windows-x64.zip"
            "Link (EXE) : https://github.com/${{ github.repository }}/releases/download/${{ steps.pack.outputs.tag }}/TauriKargo-${{ inputs.run_id }}-windows-x64.exe"
          ) | Set-Content -Path $env:GITHUB_STEP_SUMMARY -Encoding utf8
