name: Sign Windows EXE (by run_id)

on:
  workflow_dispatch:
    inputs:
      run_id:
        description: "Run ID du build qui a publié l'artefact"
        required: true
      artifact_name:
        description: "Nom exact de l'artefact à signer"
        required: true
        default: "tauri-windows-exe"
      tag_name:
        description: "Tag de release (ex: v1.2.3)"
        required: false
        default: latest
      release_name:
        description: "Nom de la release"
        required: false
        default: "Latest signed build"

permissions:
  actions: read
  contents: write

jobs:
  sign:
    runs-on: windows-latest
    steps:
      - name: Download artifact from run
        uses: dawidd6/action-download-artifact@v3
        with:
          run_id: ${{ inputs.run_id }}
          name: ${{ inputs.artifact_name }}
          if_no_artifact_found: fail

      - name: Require signing secrets
        shell: pwsh
        run: |
          if (-not "${{ secrets.WINDOWS_CERTIFICATE }}" -or -not "${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}") {
            Write-Error "Secrets manquants: WINDOWS_CERTIFICATE / WINDOWS_CERTIFICATE_PASSWORD"
          }

      - name: Decode PFX
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
        run: |
          New-Item -ItemType Directory -Force certificate | Out-Null
          Set-Content certificate\cert.b64 $env:WINDOWS_CERTIFICATE
          certutil -decode certificate\cert.b64 certificate\codesign.pfx | Out-Null

      - name: Resolve signtool.exe
        shell: pwsh
        run: |
          $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
            Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          if (-not $st) {
            choco install windows-sdk-10-version-10.0.22621.0 -y
            $st = Get-ChildItem "C:\Program Files (x86)\Windows Kits\10\bin" -Recurse -Filter signtool.exe -ErrorAction SilentlyContinue |
              Sort-Object FullName -Descending | Select-Object -First 1 -ExpandProperty FullName
          }
          if (-not $st) { Write-Error "signtool.exe introuvable." }
          "SIGNTOOL=$st" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Locate EXE and ZIP
        id: find
        shell: pwsh
        run: |
          $exe = Get-ChildItem -Path . -Filter TauriKargo*.exe -Recurse | Select-Object -First 1
          if (-not $exe) { Write-Error "Aucun .exe 'TauriKargo*.exe' trouvé." }
          $zip = Get-ChildItem -Path . -Filter TauriKargo*-windows-*.zip -Recurse | Select-Object -First 1
          if (-not $zip) { Write-Error "Aucun ZIP 'TauriKargo*-windows-*.zip' trouvé." }

          "exe=$($exe.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "zip=$($zip.FullName)" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          Write-Host "EXE => $($exe.FullName)"
          Write-Host "ZIP => $($zip.FullName)"

      - name: Sign EXE
        shell: pwsh
        env:
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        run: |
          $exe = "${{ steps.find.outputs.exe }}"
          & "$env:SIGNTOOL" sign `
            /fd sha256 `
            /f certificate\codesign.pfx `
            /p "$env:WINDOWS_CERTIFICATE_PASSWORD" `
            /tr http://timestamp.digicert.com `
            /td sha256 `
            /d "TauriKargo" `
            "$exe"
          if ($LASTEXITCODE -ne 0) { exit $LASTEXITCODE }

      - name: Verify signature
        shell: pwsh
        run: |
          $exe = "${{ steps.find.outputs.exe }}"
          $sig = Get-AuthenticodeSignature "$exe"
          $sig | Format-List Status,StatusMessage,SignerCertificate
          if ($sig.Status -ne 'Valid') { Write-Error "Signature invalid: $($sig.Status)" }

      - name: Rebuild ZIP with signed EXE (same name)
        id: rezip
        shell: pwsh
        run: |
          $exe = "${{ steps.find.outputs.exe }}"
          $zip = "${{ steps.find.outputs.zip }}"
          $tmp = Join-Path ([IO.Path]::GetTempPath()) ([IO.Path]::GetRandomFileName())
          New-Item -ItemType Directory -Path $tmp | Out-Null

          # si le zip d'origine ne contient que l'exe, on peut juste le remplacer
          Remove-Item $zip -Force
          Compress-Archive -Path $exe -DestinationPath $zip

          $sha256 = (Get-FileHash $zip -Algorithm SHA256).Hash
          "zip_sha256=$sha256" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Upload signed exe (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: signed-exe
          path: ${{ steps.find.outputs.exe }}

      - name: Upload signed zip (artifact)
        uses: actions/upload-artifact@v4
        with:
          name: signed-zip
          path: ${{ steps.find.outputs.zip }}

      - name: Create / Update Pre-release with ZIP + EXE
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ inputs.tag_name }}
          name: ${{ inputs.release_name }}
          prerelease: true
          make_latest: true
          draft: false
          files: |
            ${{ steps.find.outputs.zip }}
            ${{ steps.find.outputs.exe }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Summary
        shell: pwsh
        run: |
          @(
            "# Signing & Release summary"
            "EXE : ${{ steps.find.outputs.exe }}"
            "ZIP : ${{ steps.find.outputs.zip }}"
            "ZIP SHA256 : ${{ steps.rezip.outputs.zip_sha256 }}"
            "Tag : ${{ inputs.tag_name }}"
          ) | Set-Content -Path $env:GITHUB_STEP_SUMMARY -Encoding utf8
